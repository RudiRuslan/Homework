import java.util.Arrays;

public class dz3_5sem {
    private static int count=1;
    private static int length=8;
    public static void main(String[] args) {
        int[] []  arr= new int [length] [length];
        for (int i = 0; i < length; i++) {
            poisk(arr, i, 0);
        }

    }

    public static void printarr(int[] []  arr2) {
        System.out.print("\n");
        for (int i = 0; i < arr2.length; i++) {
            for (int j = 0; j < arr2.length; j++) {
                 System.out.print(arr2[i][j]+" ");
            }
            System.out.print("\n");
        }
    }

    public static void copyarr(int[] []  arr,int[] []  arr1) {
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length; j++) {
                arr1[i][j]=arr[i][j];
            }
        }
    }

    public static boolean poisk(int[] []  arr, int k, int m) {
        int[] []  arr1= new int [length] [length];
        copyarr(arr,arr1);
        Boolean rez=true;
        if (prov(arr1, k, m)){
            arr1 [k] [m] =1;
            if (m+1<length){
                m=m+1;
                for (int i = 0; i < arr1.length; i++) {                    
                    rez=poisk(arr1, i,m);
                    // if (i==2 && rez){
                    //    System.out.printf("%d %d %d ",count++,k,m);
                    // }
                }
            }
        }else{
            rez=false;
        }
        if ( m==length-1 && rez){
            printarr(arr1);
            System.out.printf("%d %d %d ",count++,k,m);
        }
        return rez;
    }

    public static boolean prov(int[] []  arr, int k, int m) {
        Boolean rez=true;
        for (int i = 0; i < length; i++) {
            if (arr [k][i]!=0 || arr [i][m]!=0 ){
                rez=false;
            }
            if (k-i>=0 && m-i>=0){
                if (arr [k-i][m-i]!=0){
                    rez=false;
                }
            }
            if (k+i<length && m+i<length){
                if (arr [k+i][m+i]!=0){
                    rez=false;
                }
            }
            if (k+i<length && m-i>=0){
                if (arr [k+i][m-i]!=0){
                    rez=false;
                }
            }
            if (k-i>=0 && m+i<length){
                if (arr [k-i][m+i]!=0){
                    rez=false;
                }
            }
        }
        return rez;
    }
}
